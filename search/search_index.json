{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"vkv","text":"<p><code>vkv</code> is a little CLI tool written in Go, which enables you to list, compare, import, document, backup &amp; encrypt secrets from a HashiCorp Vault KV engine:</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Support KV version 1 &amp; version 2 (no need to specify the version <code>vkv</code> will automatically detect the engines version)</li> <li>CI/CD Integrations for Gitlab, GitHub, Azure Devops</li> <li>support all Vault Auth Env Vars and <code>VKV_LOGIN_COMMAND</code> for avoiding having to hardcode the <code>VAULT_TOKEN</code> (example)</li> <li>clickable secrets redirecting to the secret in Vaults UI</li> <li>recursively print secrets of any KV  Engine in <code>json</code>, <code>yaml</code>, <code>markdown</code> and other formats</li> <li>engine export shows the secret version as well as its custom metadata</li> <li>customize the output (show only-keys, only-paths, mask/unmask secrets) via flags or environment</li> <li>print the CRUD-capabilities of the authenticated token for each KV-path (format: <code>policy</code>)</li> <li>print secrets in <code>export &lt;key&gt;=&lt;value&gt;</code> format for env var exporting (format: <code>export</code>)</li> <li>move or migrate secrets from KVV1 to a KVV2 Engine or any subpath example</li> <li>import secrets back to Vault from <code>vkv</code>'s <code>json</code> or <code>yaml</code> format output</li> <li>save and restore KVv2 snapshots (including namespaces) (kubernetes example)</li> <li>list all KVv2-engines or namespaces for scripting purposes (fzf example)</li> <li>more handy snippets using <code>fzf</code>, <code>sops</code> &amp; <code>diff</code></li> </ul> <p>Checkout the Quickstart Guide to learn more about <code>vkv</code> as well as the CLI Reference</p>"},{"location":"authentication/","title":"Authentication","text":"<p><code>vkv</code> supports all of Vaults environment variables as well as any configured Token helpers.</p> <p>In order to authenticate you will have to set at least one of the <code>VAULT_ADDR</code> or <code>VKV_LOGIN_COMMAND</code> and <code>VAULT_TOKEN</code> env vars.</p>"},{"location":"authentication/#macoslinux","title":"MacOS/Linux","text":"<pre><code>export VAULT_ADDR=\"http://127.0.0.1:8200\"\nexport VAULT_TOKEN=\"hvs.XXX\"\nvkv export --path &lt;KVv2-path&gt;\n</code></pre>"},{"location":"authentication/#windows","title":"Windows","text":"<pre><code>SET VAULT_ADDR=http://127.0.0.1:8200\nSET VAULT_TOKEN=s.XXX\nvkv.exe export --path &lt;KVv2-path&gt;\n</code></pre>"},{"location":"authentication/#special-env-var-vkv_login_command","title":"Special Env Var <code>VKV_LOGIN_COMMAND</code>","text":"<p>For advanced use cases, you can set <code>VKV_LOGIN_COMMAND</code>, that way <code>vkv</code> will first execute the specified command and use the output of the command as the token. This is way you don't have to hardcode and set <code>VAULT_TOKEN</code>, this is especially useful when using <code>vkv</code> in CI. (See Gitlab Integration):</p> <p>Example:</p> <pre><code>export VKV_LOGIN_COMMAND=\"vault write -field=token auth/jwt/login jwt=${CI_JOB_JWT_V2}\"\nvkv export -p\n</code></pre>"},{"location":"authentication/#token-precedence","title":"Token Precedence","text":"<p>The following token precedence is applied (from highest to lowest):</p> <ol> <li><code>VAULT_TOKEN</code></li> <li><code>VKV_LOGIN_COMMAND</code></li> <li>Vault Token Helper, where the token will be written to <code>~/.vault-token</code>.</li> </ol> <p>If <code>vkv</code> detects more than one possible token source, warnings are shown as the following, indicating which token source will be used:</p> <pre><code>$&gt; vkv export -p secret\n[WARN] More than one token source configured (either VAULT_TOKEN, VKV_LOGIN_COMMAND or ~/.vault-token).\n[WARN] See https://falcosuessgott.github.io/vkv/authentication for vkv's token precedence logic. Disable these warnings with VKV_DISABLE_WARNING.\n[INFO] Using VAULT_TOKEN.\n\nsecret/ [desc=key/value secret storage] [type=kv2]\n\u2514\u2500\u2500 secret [v=1]\n    \u2514\u2500\u2500 key=*****\n</code></pre> <p>As described, one can disable these warning by setting <code>VKV_DISABLE_WARNING</code> to any value.</p>"},{"location":"authentication/#vault-token-lease-renewal","title":"Vault Token Lease Renewal","text":"<p>Depending on the number of Namespaces, KV mounts and secrets of your Vault and your Token TTL settings the lease of the <code>VAULT_TOKEN</code> being used may expire during a <code>vkv snapshot</code> operation (reported in #363).</p> <p>Important</p> <p>To avoid that <code>vkv</code> automatically attempts to refresh the lease of the token (ref. https://developer.hashicorp.com/vault/docs/concepts/lease) being used.</p> <p>This should only affect users of large enterprise Vaults.</p> <p>Per default <code>vkv</code> will attempt to compare every <code>10s</code> (change with <code>VKV_RENEWAL_INTERVAL</code>) the current token TTL with the original creation TTL and if the current TTL less than half the creation TTL, a lease token renewal for another <code>30s</code> (change with <code>VKV_RENEWAL_INCREMENT</code>) is performed. <code>vkv</code> will error silently to not affect any JSON/YAML output.</p> <p>You can find the exact implementation here.</p> <p>Tip</p> <p>You can always disable the token lease renewal by exporting <code>VKV_LEASE_REFRESHER_ENABLED</code></p>"},{"location":"authentication/#token-policy","title":"Token Policy","text":"<p>The following endpoints are used by vkv:</p> <pre><code># required to check if the provides VAULT_TOKEN is valid\npath \"/auth/token/lookup-self\" {\n    capabilities = [\"read\"]\n}\n\n# required for vkv`s token lease renewal, fails silently\npath \"/auth/token/renew-self\" {\n    capabilities = [\"create\", \"update\"]\n}\n\n# required for \"vkv export\" to read a secrets values\npath \"&lt;mount&gt;/data/&lt;path&gt;\"{           # or \"*\" to allow every path recursive\n  capabilities = [\"read\"]\n}\n\n# required for \"vkv import\" to create a secrets values\npath \"&lt;mount&gt;/data/&lt;path&gt;\" {          # or \"*\" to allow every path recursive\n  capabilities = [\"create\",\"update\"]\n}\n\n# required for \"vkv export\" to discover all secrets recursively\npath \"&lt;mount&gt;/metadata/&lt;path&gt;\" {        # or \"*\" to allow every path recursive\n  capabilities = [\"read\", \"list\"]\n}\n\n# required for \"vkv snapshot save\" to list all KV engines\npath \"sys/mounts\"{\n  capabilities = [\"read\"]\n}\n\n# required for \"vkv export\" to determine the KV version (1 or 2)\npath \"sys/mounts/&lt;mount&gt;\" {       # or \"*\" to allow every KV engine\n  capabilities = [\"read\"]\n}\n\n# required for \"vkv snapshot restore\" to create/overwrite KV engines when importing but the mount already exists\npath \"sys/mounts/&lt;mount&gt;\" {       # or \"*\" to allow every KV engine\n  capabilities = [\"create\", \"delete\"]\n}\n</code></pre>"},{"location":"cicd_azure/","title":"Azure Devops","text":"<p>Azure Devops Example for reading Secrets from Vault using <code>vkv</code>:</p> <pre><code>resources:\n  containers:\n  - container: ghcr.io/falcosuessgott/vkv:latest\n    image: vkv\n    env:\n      VAULT_ADDR: https://vault.server.de\n\n      VKV_MODE: server\n      VKV_SERVER_PATH: secrets\n      VKV_LOGIN_COMMAND: |\n        vault login -token-only -method=userpass username=admin password=\"${VAULT_PASSWORD}\"\n    ports:\n      - 8080:8080\n\npool:\n  vmImage: 'ubuntu-latest'\n\nservices:\n  vkv: vkv\n\nsteps:\n  - script: |\n      eval $(curl http://vkv:8080)\n      echo $secret\n    displayName: Read secrets as env vars using vkv\n</code></pre>"},{"location":"cicd_github/","title":"Github Action","text":"<p>Github Action Example for reading Secrets from Vault using <code>vkv</code>:</p> <pre><code>name: Vault Secrets using vkv\non: push\n\njobs:\n  job_name:\n    runs-on: ubuntu-latest\n    services:\n      vkv:\n        image: ghcr.io/falcosuessgott/vkv:latest\n        env:\n          VAULT_ADDR: https://vault.server.de\n          VKV_MODE: server\n          VKV_SERVER_PATH: secrets\n          VKV_LOGIN_COMMAND: |\n            vault login -token-only -method=userpass username=admin password=\"${VAULT_PASSWORD}\"\n        ports:\n          - 8080:8080\n    steps:\n      - name: read secrets from vkv server\n        run: eval $(curl http://vkv:8080/export)\n      - name: output secrets now available as env vars\n        run: echo $secret\n</code></pre>"},{"location":"cicd_gitlab/","title":"Gitlab CI","text":"<p>Gitlab-CI Example for reading Secrets from Vault using <code>vkv</code>:</p> <pre><code>variables:\n  # vaults env vars\n  # all of vault env vars are supported (https://developer.hashicorp.com/vault/docs/commands#environment-variables)\n  # required:\n  VAULT_ADDR: https://prod.vault.de\n  VAULT_NAMESPACE: \"${CI_PROJECT_ROOT_NAMESPACE}\"\n\n  # command vkv uses to authenticate to vault, all vars are available\n  VKV_LOGIN_COMMAND: vault write -field=token auth/jwt/login jwt=\"${VAULT_JWT_TOKEN}\"\n\n  # vault kv path to read secrets from\n  VKV_SERVER_PATH: \"secrets\"\n\n# default sets global default settings that are inherited to all jobs\ndefault:\n  # spin up a vkv service container in server mode, configure using variables/env vars\n  services:\n    - name: ghcr.io/falcosuessgott/vkv:latest\n      command: [\"server\"]\n      alias: vkv\n  # global before_scripts block\n  before_script:\n    # install curl, or wget in your job container\n    - apk add --no-cache curl\n\n    # curl/wget vkv on /export, which will expot all secrets from VKV_SERVER_PATH, eval the output into your shell\n    - eval $(curl http://vkv:8080/export)\n  # global jwt token (https://docs.gitlab.com/ee/ci/examples/authenticating-with-hashicorp-vault/#example)\n  id_tokens:\n    # set jwt aud field to gitlab ci server host\n    VAULT_JWT_TOKEN:\n      aud: \"${CI_SERVER_HOST}\"\n\n# job\n# this job inherits the service container and before script block,\n# hence all secrets in VKV_SERVER_PATH are available in your shell\ntest:\n  stage: test\n  script:\n    - make test\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p><code>vkv</code> and  all its subcommands are highly configurable using environment variables.</p> <p>Checkout the subcommands documentation as well as the help messages (<code>vkv &lt;subcommand&gt; --help</code>) to see the available environment variables.</p>"},{"location":"configuration/#mode","title":"Mode","text":"<p>You can control the executed subcommand of <code>vkv</code> by setting <code>VKV_MODE</code> to either on of:</p> <ul> <li><code>export</code></li> <li><code>import</code></li> <li><code>server</code></li> <li><code>list</code></li> <li><code>snapshot_restore</code></li> <li><code>snapshot_save</code></li> </ul> <p>example:</p> <pre><code>VKV_EXPORT_PATH=secret VKV_MODE=export vkv\nsecret/\n\u251c\u2500\u2500 v1: admin [key=value]\n\u2502   \u2514\u2500\u2500 sub=********\n\u251c\u2500\u2500 v1: demo\n\u2502   \u2514\u2500\u2500 foo=***\n\u2514\u2500\u2500 sub/\n    \u251c\u2500\u2500 v1: demo\n    \u2502   \u251c\u2500\u2500 demo=***********\n    \u2502   \u251c\u2500\u2500 password=******\n    \u2502   \u2514\u2500\u2500 user=*****\n    \u2514\u2500\u2500 sub2\n        \u2514\u2500\u2500 v2: demo [admin=false key=value]\n            \u251c\u2500\u2500 admin=***\n            \u251c\u2500\u2500 foo=***\n            \u251c\u2500\u2500 password=********\n            \u2514\u2500\u2500 user=****\n</code></pre>"},{"location":"configuration/#shell-completion","title":"Shell Completion","text":"<p><code>vkv</code> offers shell completion for <code>zsh</code>, <code>bash</code> and <code>fish</code> shells:</p> <pre><code># bash\nsource &lt;(vkv completion bash)\n\n# systemwide\nvkv completion bash &gt; /etc/bash_completion.d/vkv\n\n# zsh\necho \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\nsource &lt;(vkv completion zsh); compdef _vkv vkv\n\n# systemwide\nvkv completion zsh &gt; \"${fpath[1]}/_vkv\"\n\n# fish\nvkv completion fish | source\n\n# systemwide\nvkv completion fish &gt; ~/.config/fish/completions/vkv.fish\n</code></pre>"},{"location":"configuration/#manpage","title":"Manpage","text":"<p>when installed via your systems package manager <code>vkv</code> ships manpages.</p> <p>Simply run:</p> <pre><code>man vkv\n</code></pre>"},{"location":"development/","title":"Development","text":"<p>Clone this repository and run:</p> <pre><code>make bootstrap\n</code></pre> <p>in order to have all used build dependencies</p> <p>You can spin up a development vault for local testing by running:</p> <pre><code>make vault\n</code></pre> <p>The following environment variables are required:</p> <pre><code>export VAULT_ADDR=\"http://127.0.0.1:8200\"\nexport VAULT_TOKEN=\"root\"\nexport VKV_PATH=\"secret\"\n</code></pre> <p>If everything worked fine, you should be able to run:</p> <pre><code>go run main.go export -p secret\nsecret/ [desc=key/value secret storage] [type=kv2]\n\u251c\u2500\u2500 admin [v=1] [key=value]\n\u2502   \u2514\u2500\u2500 sub=********\n\u251c\u2500\u2500 demo [v=1]\n\u2502   \u2514\u2500\u2500 foo=***\n\u2514\u2500\u2500 sub\n    \u251c\u2500\u2500 demo [v=1]\n    \u2502   \u251c\u2500\u2500 demo=***********\n    \u2502   \u251c\u2500\u2500 password=******\n    \u2502   \u2514\u2500\u2500 user=*****\n    \u2514\u2500\u2500 sub2\n        \u2514\u2500\u2500 demo [v=2] [admin=false key=value]\n            \u251c\u2500\u2500 admin=***\n            \u251c\u2500\u2500 foo=***\n            \u251c\u2500\u2500 password=********\n            \u2514\u2500\u2500 user=****\n</code></pre>"},{"location":"example_diff/","title":"diff","text":"<p><code>vkv</code> can be used to compare secrets across Vault servers or KV engines.</p> <pre><code>\"diff -ty &lt;(vkv export --p=secret --show-values) &lt;(vkv export -p=secret_2 --show-values)\"\n</code></pre> <p>Here is an example using <code>diff</code>, the <code>|</code> indicates the changed entry per line:</p>"},{"location":"example_diff/#demo","title":"Demo","text":""},{"location":"example_direnv/","title":"direnv","text":"<p>You can use <code>vkv</code> and <code>direnv</code> to autimatically source KV secrets in your shell.</p>"},{"location":"example_direnv/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install direnv and hook into your shell</li> </ul>"},{"location":"example_direnv/#demo","title":"Demo","text":"<p>Create in a project a <code>.envrc</code> file: <pre><code>export VAULT_ADDR=\"https://vault:8200\"\nexport VAULT_TOKEN=\"$(cat ~/.vault-token)\"\n\neval $(vkv export -p kv/secrets -f export)\n</code></pre></p> <p>Now if you go into that directory and run <code>direnv allow</code>, you have the secrets under <code>kv/secrets</code> exported as env various:</p> <pre><code>env | grep OS_\nOS_USER=admin\nOS_PASSWORD=pasword\n</code></pre>"},{"location":"example_fzf/","title":"fzf","text":"<p>using <code>vault secrets list</code> and a little bit of <code>jq</code>-logic, we can get a list of all KV-engines visible for the token.</p> <p>If we pipe this into <code>fzf</code> we can get a handy little  preview-app:</p> <pre><code>vkv list engines --all --include-ns-prefix | fzf --preview 'vkv export -e ${}'\n</code></pre>"},{"location":"example_fzf/#demo","title":"Demo","text":""},{"location":"example_kubernetes/","title":"Kubernetes","text":"<p><code>vkv</code> comes in container images, which enable you to run scheduled snapshots in a kubernetes cluster.</p> <p>The idea is to schedule a cronjob which snapshots a vault server and writes the snapshot files to a persistent volume.</p> <p>Here is a minimum working <code>k3s</code> using <code>local-storage</code> example:</p>"},{"location":"example_kubernetes/#create-the-volume-directories","title":"create the volume directories","text":"<pre><code># on a k3s node\nmkdir -p /data/volume/pv1\nchmod 777 /data/volume/pv1 # for testing\n</code></pre>"},{"location":"example_kubernetes/#create-a-pv","title":"create a pv","text":"<pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: local-pv\nspec:\n  capacity:\n    storage: 5Gi\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: local-storage\n  local:\n    path: /data/volumes/pv1\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - worker-node # change\n</code></pre>"},{"location":"example_kubernetes/#create-a-pvc","title":"create a pvc","text":"<pre><code>kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: local-storage\n  resources:\n    requests:\n      storage: 5Gi\n</code></pre>"},{"location":"example_kubernetes/#create-a-cronjob","title":"create a cronjob","text":"<pre><code>apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: vkv\nspec:\n  schedule: \"* * * * *\" # runs every minute\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: vkv\n            image: ghcr.io/falcosuessgott/vkv:latest # stick to a version later\n            imagePullPolicy: IfNotPresent\n            command: [\"/bin/sh\", \"-c\"]\n            args:\n              - /vkv snapshot save -d /mnt/vkv-export-$(date '+%Y%m%d%H%M%S')\n            env:\n              - name: VAULT_SKIP_VERIFY\n                value: \"true\"\n              - name: VAULT_ADDR\n                value: https://vault-server:8200 # change to Vault API address\n              - name: VAULT_TOKEN\n                value: hvs.xxxx # change to your token\n            volumeMounts:\n              - name: local-persistent-storage\n                mountPath: /mnt\n          restartPolicy: OnFailure\n          volumes:\n            - name: local-persistent-storage\n              persistentVolumeClaim:\n                claimName: pvc\n</code></pre>"},{"location":"example_kubernetes/#verify-snapshots","title":"verify snapshots","text":"<p>if everything went correct, you should see the following:</p> <pre><code>ls -l /data/volumes/pv1/\ntotal 0\ndrwxr-xr-x. 2 root root 108  5. Jan 09:50 vkv-export-20230105095000\ndrwxr-xr-x. 2 root root 108  5. Jan 09:51 vkv-export-20230105095100\n</code></pre>"},{"location":"example_kubernetes/#some-last-thoughts","title":"some last thoughts","text":"<p>Obviously this approach is just for development purposes. In order to make it production ready, you should consider changing some things, such as:</p> <ul> <li>inject the environments from a ConfigMap</li> <li>inject the token from a Secret</li> <li>Or obtain the token using Vaults kubernetes auth engine and the Vault Agent injector</li> <li>run the cronjob daily</li> <li>update the permission of the volumes</li> <li>backup the pv</li> </ul>"},{"location":"example_migrate_kvv1_kvv2/","title":"Migrate Secrets from KVv1 to KVv2","text":"<p><code>vkv</code> enables you to quickly migrate KVv1 secrets KVv2:</p> <pre><code># list all secret engines\n$&gt; vkv list engines\nkvv1/\n\n# list kvv1 secrets\n$&gt;  vkv export -p kvv1\nkvv1/\n\u2514\u2500\u2500 dev\n    \u251c\u2500\u2500 admin=****\n\n# move secrets to kvv2 engine\n$&gt; vkv export -p kvv1 -f=json | vkv import -p kv\nv2\nreading secrets from STDIN\nparsing secrets from JSON\nwriting secret \"kvv2/dev\"\nsuccessfully imported all secrets\n\nresult:\n\nkvv2/\n\u2514\u2500\u2500 dev [v=2]\n    \u251c\u2500\u2500 admin=****\n\n# verify\n$&gt; vkv export -p kvv2 --show-values\nkvv2/\n\u2514\u2500\u2500 dev [v=1]\n    \u251c\u2500\u2500 admin=user\n    \u2514\u2500\u2500 password=ok\n</code></pre> <p>You can also move a KV mount within another engine:</p> <pre><code>$&gt; vkv export -p kvv1 -f=json | vkv import -p engine/subpath --force\nreading secrets from STDIN\nparsing secrets from JSON\nwriting secret \"engine/subpath/dev\"\nsuccessfully imported all secrets\n\nresult:\n\nengine/subpath/\n\u2514\u2500\u2500 subpath/\n    \u2514\u2500\u2500 dev\n        \u251c\u2500\u2500 admin=****\n\n# verify\n$&gt; vkv export -p engine\nengine/\n\u2514\u2500\u2500 subpath/\n    \u2514\u2500\u2500 dev [v=1]\n        \u251c\u2500\u2500 admin=****\n        \u2514\u2500\u2500 password=**\n</code></pre>"},{"location":"example_sops/","title":"sops","text":"<p>In order to store the secret export created by <code>vkv</code> sops can be used. This example shows how to encrypt &amp; decrypt <code>vkv</code> exported secrets using <code>sops</code> and Vaults transit engine:</p>"},{"location":"example_sops/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install sops</li> </ul>"},{"location":"example_sops/#demo","title":"Demo","text":"<pre><code>export VAULT_ADDR=\"https://vault.server\"\nexport VAULT_TOKEN=\"hvs.XXXX\"\n\n# enable engine and create encryption key\nvault secrets enable -path=sops transit\nvault write sops/keys/vkv type=rsa-4096\n\n# export secrets as yaml and write to file\nvkv export -p secret --show-values -f=yaml &gt; export.yaml\n\n# configure sops\ncat &lt;&lt;EOF &gt; .sops.yaml\ncreation_rules:\n        - path_regex: \\.yaml$\n          hc_vault_transit_uri: \"http://$VAULT_ADDR/v1/sops/keys/vkv\"\nEOF\n\n# encrypt secrets\nsops -e export.yaml &gt; encrypted_export.yaml\n\n# decrypt secrets\nsops -d encrypted_export.yaml\n</code></pre> <p>an encrypted secrets file looks like this:</p> <pre><code>secret/:\n    admin:\n        sub: ENC[AES256_GCM,data:fmHQMHCBNIs=,iv:s2q/j2tYvTN+u8KOXKm+Rbt1Y3oFO0fwjYCQy3jBHEU=,tag:+f5t/2LZCkIaAaoYeiY9KA==,type:str]\n    demo:\n        foo: ENC[AES256_GCM,data:kZwT,iv:QkNZwsUZ4lngluUHXae7abYAjAZFbNgJ7GdgM18GlLM=,tag:74aMFxt1pmCCy/rFcD7/rw==,type:str]\n    sub/:\n        demo:\n            demo: ENC[AES256_GCM,data:f1m2veKk4w7i2hc=,iv:PyycH5Z9TEf/9u/nm7XYcnMEBHB+AY4ARAABoV8DQ74=,tag:QsPcwlw3vQNxytrfiZ1lyg==,type:str]\n            password: ENC[AES256_GCM,data:m6DXfI4r,iv:3rLoWDTRfHuGUzJjoOemYv4C89EedK+CKX+9R7QfDZI=,tag:2Ul1wt77XGzina8QyOZMjQ==,type:str]\n            user: ENC[AES256_GCM,data:EYXYIU8=,iv:7ll05h50Nu0Mp+bWuIrJjEsP4KRpH8L1vn3ZvqXlEPc=,tag:zN8Pzmk4QvX1hdlb955KaQ==,type:str]\n        sub2/:\n            demo:\n                foo: ENC[AES256_GCM,data:AnMP,iv:oyaYacdlcnInw57im4ARprWz6wkgKqguiK6IHwdwn4w=,tag:4u0JZJ1jFvevZLDe/tlmzg==,type:str]\n                password: ENC[AES256_GCM,data:Q1zzktiD58Q=,iv:1OZjqPyW0MNiTcll3tXkZ4AQ9CnNqtWzYmSw6PPEYxo=,tag:Z29GfxZnrWJnnzI8dckNHw==,type:str]\n                user: ENC[AES256_GCM,data:a4Ju3Q==,iv:lpMo+/5K3mwqLQSpoAKLaL/Np6KAtoJDFZEAslu6TOY=,tag:BiZ4t7muKQu+AU9JvTNc4w==,type:str]\nsops:\n    kms: []\n    gcp_kms: []\n    azure_kv: []\n    hc_vault:\n        - vault_address: http://127.0.0.1:8200\n          engine_path: sops\n          key_name: vkv\n          created_at: \"2022-11-17T14:23:40Z\"\n          enc: vault:v1:LtnJjUYl/pBDSOQrhSIsLp6XW0Ng/TM26GjBYcy95Fn8qAXBqJRyhYUd9Df5HF91RIhpiV11Rgj9hKj4sg0HcZIQnuBTQo30mgVQGcUhIL2PrV1qgDB3Ezm0W90s4aKH/8fhvToGVPB5nhf2/z9hTwnmFO+39GnC1JooofRdo9+1B7DBcsvliWSc4gIu3EbJwYUTqxLu92BJYWYM5ZZNtox0snJiYK3dfI7tltD7AtCYmwSJXFlkN3/lUrBGcNFOpya00/dKR/it2qbgtIJclcqPsYx6zoJ0MG/Z1RIs+v5mQjQlDKP2Stqxj+MijwtoPeXtdhdt7wdbWTxQHe4euw==\n    age: []\n    lastmodified: \"2022-11-17T14:23:40Z\"\n    mac: ENC[AES256_GCM,data:X+yzr/+S6KWYaMrb1rvDK8bS5ghXDrnSzIT0RZ1TJdXzhcJmvxyUo2rfWkTVzNKcmoJnWyPKRujGVKZWTVmqa5hC5PQbc6tOqRgNrUmo4YkUoOyCyvPhJqCrRrjrhRtrUPIvRcDWMIhZCibjlr+XSglb+lkgVWNcghLWnez9I/w=,iv:2dZUWjnsLOLHV7wfFbIBDSW3ehLtsxmNeqmMwDsDqwU=,tag:PpaLsAA25TWQnYNTQnDswQ==,type:str]\n    pgp: []\n    unencrypted_suffix: _unencrypted\n    version: 3.7.3\n</code></pre>"},{"location":"export/","title":"Export","text":"<p><code>vkv export</code> requires an engine path (<code>--path</code> or <code>--engine-path</code>) and supports the following export formats (specify via <code>--format</code> flag).</p> <p>See the CLI Reference for more details on the supported flags and env vars.</p> <p>Warning</p> <p>Vault allows <code>/</code> in the name of a KV engine. This makes it difficult for <code>vkv</code> to distinguish between directories and the KV engine name..</p> <p>If your KV engine name/mount contains a <code>/</code> you have to specify it using <code>--engine-path|-e</code>, otherwise <code>vkv</code> will output the secrets wrong.</p> <p>This also applies for any <code>vkv import ...</code> operations.</p> <p>Info</p> <p><code>vkv</code> handles 3 different path arguments, specified using <code>-e|-p</code></p> <ol> <li><code>root path</code>: any normal KV mount. Use <code>-p</code>.</li> <li><code>engine-path</code>: in case your KV mount contains a <code>/</code>. Use <code>-e</code>.</li> <li><code>sub path</code>: the path to the corresponding directory within a KV mount. When using <code>-p</code> this is everything after the first <code>/</code>: e.g: <code>kv/prod/db/</code>; root path=<code>kv</code>, subpath=<code>prod/db</code>. In conjunction with a <code>-e</code> you can specify a sub-path by using -p: <code>-e=kv/prod -p=db</code>.</li> </ol>"},{"location":"export/#base","title":"base","text":"<pre><code>&gt; vkv export -p secret -f=base\nsecret/ [desc=key/value secret storage] [type=kv2]\n\u251c\u2500\u2500 admin [v=1] [key=value]\n\u2502   \u2514\u2500\u2500 sub=********\n\u251c\u2500\u2500 demo [v=1]\n\u2502   \u2514\u2500\u2500 foo=***\n\u2514\u2500\u2500 sub\n    \u251c\u2500\u2500 demo [v=1]\n    \u2502   \u251c\u2500\u2500 demo=***********\n    \u2502   \u251c\u2500\u2500 password=******\n    \u2502   \u2514\u2500\u2500 user=*****\n    \u2514\u2500\u2500 sub2\n        \u2514\u2500\u2500 demo [v=2] [admin=false key=value]\n            \u251c\u2500\u2500 admin=***\n            \u251c\u2500\u2500 foo=***\n            \u251c\u2500\u2500 password=********\n            \u2514\u2500\u2500 user=****\n</code></pre>"},{"location":"export/#yaml","title":"yaml","text":"<pre><code>&gt; vkv export -p secret -f=yaml\nsecret/:\n  admin:\n    sub: '********'\n  demo:\n    foo: '***'\n  sub/:\n    demo:\n      demo: '***********'\n      password: '******'\n      user: '*****'\n    sub2/:\n      demo:\n        admin: '***'\n        foo: '***'\n        password: '********'\n        user: '****'\n</code></pre>"},{"location":"export/#json","title":"json","text":"<pre><code>&gt; vkv export -p secret -f=json\n{\n  \"secret/\": {\n    \"admin\": {\n      \"sub\": \"********\"\n    },\n    \"demo\": {\n      \"foo\": \"***\"\n    },\n    \"sub/\": {\n      \"demo\": {\n        \"demo\": \"***********\",\n        \"password\": \"******\",\n        \"user\": \"*****\"\n      },\n      \"sub2/\": {\n        \"demo\": {\n          \"admin\": \"***\",\n          \"foo\": \"***\",\n          \"password\": \"********\",\n          \"user\": \"****\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"export/#export_1","title":"export","text":"<pre><code>&gt; vkv export -p secret -f=export\nexport admin='key'\nexport demo='hello world'\nexport foo='bar'\nexport password='password'\nexport sub='password'\n\neval $(vkv export -p secret -f=export)\necho $admin\nkey\n</code></pre>"},{"location":"export/#policy","title":"policy","text":"<pre><code>&gt; vkv export -p secret -f=policy\nPATH                    CREATE  READ    UPDATE  DELETE  LIST    ROOT\nsecret/sub/sub2/demo    \u2716       \u2716       \u2716       \u2716       \u2716       \u2714\nsecret/admin            \u2716       \u2716       \u2716       \u2716       \u2716       \u2714\nsecret/demo             \u2716       \u2716       \u2716       \u2716       \u2716       \u2714\nsecret/sub/demo         \u2716       \u2716       \u2716       \u2716       \u2716       \u2714\n</code></pre>"},{"location":"export/#markdown","title":"markdown","text":"<pre><code>&gt; vkv export -p secret -f=markdown\n|         PATH         |   KEY    |    VALUE    | VERSION |       METADATA        |\n|----------------------|----------|-------------|---------|-----------------------|\n| secret/admin         | sub      | ********    |       1 | key=value             |\n| secret/demo          | foo      | ***         |       1 |                       |\n| secret/sub/demo      | demo     | *********** |       1 |                       |\n|                      | password | ******      |         |                       |\n|                      | user     | *****       |         |                       |\n| secret/sub/sub2/demo | admin    | ***         |       2 | admin=false key=value |\n|                      | foo      | ***         |         |                       |\n|                      | password | ********    |         |                       |\n|                      | user     | ****        |         |                       |\n</code></pre>"},{"location":"export/#template","title":"template","text":"<p><code>template</code> is a special output format that allows you, render the output using Golangs template engine. Format <code>template</code> requires either a <code>--template-file</code> or a <code>--template-string</code> flag or the equivalent env vars.</p> <p>The secrets are passed as map with the secret path as the key and the actual secrets as values:</p> <pre><code># &lt;PATH&gt;              &lt;SECRETS&gt;\nsecret/admin          map[sub:password]\nsecret/demo           map[foo:bar]\nsecret/sub/demo       map[demo:hello world password:s3cre5&lt; user:admin]\nsecret/sub/sub2/demo  map[foo:bar password:password user:user]\n</code></pre> <p>Here is an advanced template that renders the secrets in a special env var export format. Note that within a <code>--template-file</code> or a <code>--template-string</code> the following functions are available: http://masterminds.github.io/sprig/:</p> <pre><code># export.tmpl\n{{- range $path, $secrets := . }}\n{{- range $key, $value := $secrets }}\nexport {{ list $path $key | join \"/\" | replace \"/\" \"_\" | upper | trimPrefix \"SECRET_\" }}={{ $value | squote -}}\n{{ end -}}\n{{- end }}\n</code></pre> <p>This would result in the following output:</p> <pre><code>&gt; vkv export -p secret -f=template --template-file=export.tmpl\nexport ADMIN_SUB='password'\nexport DEMO_FOO='bar'\nexport SUB_DEMO_DEMO='hello world'\nexport SUB_DEMO_PASSWORD='s3cre5&lt;'\nexport SUB_DEMO_USER='admin'\nexport SUB_SUB2_DEMO_FOO='bar'\nexport SUB_SUB2_DEMO_PASSWORD='password'\nexport SUB_SUB2_DEMO_USER='user'\n</code></pre> <p>Per default <code>vkv</code> splits the secret paths at <code>/</code>, if you prefer a non-nested output (for scripting purposes) you can enable <code>--merge-paths</code> (only works in <code>yaml</code>, <code>json</code> or <code>template</code> output format):</p> <pre><code># YAML\n&gt; vkv export -p secret --merge-paths -f=yaml\nsecret/admin:\n  sub: password\nsecret/demo:\n  foo: bar\nsecret/sub/demo:\n  demo: hello world\n  password: s3cre5&lt;\n  user: admin\nsecret/sub/sub2/demo:\n  foo: bar\n  password: password\n  user: user\n\n# JSON\n&gt; vkv export -p secret --merge-paths -f=json\n{\n  \"secret/admin\": {\n    \"sub\": \"password\"\n  },\n  \"secret/demo\": {\n    \"foo\": \"bar\"\n  },\n  \"secret/sub/demo\": {\n    \"demo\": \"hello world\",\n    \"password\": \"s3cre5&lt;\",\n    \"user\": \"admin\"\n  },\n  \"secret/sub/sub2/demo\": {\n    \"foo\": \"bar\",\n    \"password\": \"password\",\n    \"user\": \"user\"\n  }\n}\n</code></pre>"},{"location":"import/","title":"Import","text":"<p><code>vkv import</code> tries to determine the path from the input, if that is not possible you can specify on using <code>--path|--engine-path</code>.</p> <p><code>vkv import</code> accepts <code>vkv</code>s YAML or JSON output (<code>vkv export -f=yaml|json</code>) either by invoking <code>vkv import -</code> (for STDIN) or by specifying a file (<code>--file</code>).</p> <p><code>vkv</code> will create the specified path if the engine does not exist yet and will error if it does, unless <code>--force</code> is specified.</p> <p>See the CLI Reference for more details on the supported flags and env vars.</p> <p>Warning</p> <p>Vault allows <code>/</code> in the name of KV engine. This makes it difficult for <code>vkv</code> to distinguish between directories and the KV engine name..</p> <p>If your KV engine name/mount contains a <code>/</code> you have to specify it using <code>--engine-path|-e</code>, otherwise <code>vkv</code> will output the secrets wrong.</p> <p>This also applies for any <code>vkv import ...</code> operations.</p> <p>Info</p> <p><code>vkv</code> handles 3 different path arguments, specified using <code>-e|-p</code></p> <ol> <li><code>root path</code>: any normal KV mount. Use <code>-p</code>.</li> <li><code>engine-path</code>: in case your KV mount contains a <code>/</code>. Use <code>-e</code>.</li> <li><code>sub path</code>: the path to the corresponding directory within a KV mount. When using <code>-p</code> this is everything after the first <code>/</code>: e.g: <code>kv/prod/db/</code>; root path=<code>kv</code>, subpath=<code>prod/db</code>. In conjunction with a <code>-e</code> you can specify a sub-path by using -p: <code>-e=kv/prod -p=db</code>.</li> </ol>"},{"location":"import/#example-usage","title":"Example Usage","text":"<pre><code>&gt; vkv export -p secret -f=yaml &gt; secret_export.yaml\n&gt; vkv import -p copy --file=secret_export.yaml\nreading secrets from secret_export.yaml\nparsing secrets from YAML\nwriting secret \"copy/admin\"\nwriting secret \"copy/demo\"\nwriting secret \"copy/sub/demo\"\nwriting secret \"copy/sub/sub2/demo\"\nsuccessfully imported all secrets\n\nresult:\n\ncopy/ [type=kv2]\n\u251c\u2500\u2500 admin [v=1] [key=value]\n\u2502   \u2514\u2500\u2500 sub=********\n\u251c\u2500\u2500 demo [v=1]\n\u2502   \u2514\u2500\u2500 foo=***\n\u2514\u2500\u2500 sub\n    \u251c\u2500\u2500 demo [v=1]\n    \u2502   \u251c\u2500\u2500 demo=***********\n    \u2502   \u251c\u2500\u2500 password=******\n    \u2502   \u2514\u2500\u2500 user=*****\n    \u2514\u2500\u2500 sub2\n        \u2514\u2500\u2500 demo [v=2] [admin=false key=value]\n            \u251c\u2500\u2500 admin=***\n            \u251c\u2500\u2500 foo=***\n            \u251c\u2500\u2500 password=********\n            \u2514\u2500\u2500 user=****\n</code></pre>"},{"location":"import/#reading-secrets-from-stdin","title":"Reading secrets from STDIN","text":"<p>The <code>-</code> in <code>vkv import -</code>, tells <code>vkv</code> do read data via STDIN. The idea of <code>vkv import -</code> is, in order to copy/mirror KV-v2 secrets or complete engines across different Vault Servers or Namespaces, you can simply pipe <code>vkv</code>s output into the <code>vkv import</code> command:</p> <pre><code># dont forget to use --show-values, otherwise the secrets will be uploaded masked.\nvkv export -p &lt;source&gt; --show-values -f=yaml | vkv import - -p &lt;destination&gt;\n</code></pre>"},{"location":"import/#a-few-notes","title":"A few notes:","text":"<ul> <li><code>&lt;source&gt;</code> and <code>&lt;destination&gt;</code> don't have to be the root path of a secret engine, you also specify sub paths and copy them another secret engine.</li> <li><code>vkv</code> will error if the secret engine already exists, you can use <code>--force</code> to overwrite the destination engine, if the destination path contains a subpath (<code>root/sub</code>), <code>vkv</code> will then insert the secrets to that specific directory</li> </ul> <p>\u26a0\ufe0f <code>vkv import</code> can overwrite important secrets, always double check the command by using the dry-run mode (<code>--dry-run</code>) first</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#brew","title":"brew","text":"<pre><code>brew install falcosuessgott/tap/vkv\n</code></pre>"},{"location":"installation/#curl","title":"cURL","text":"<pre><code>version=$(curl https://api.github.com/repos/falcosuessgott/vkv/releases/latest -s | jq .name -r)\ncurl -OL \"https://github.com/FalcoSuessgott/vkv/releases/download/${version}/vkv_$(uname)_$(uname -m).tar.gz\"\ntar xzf vkv_$(uname)_$(uname -m).tar.gz\nchmod u+x vkv\n./vkv version\n</code></pre>"},{"location":"installation/#packages","title":"Packages","text":"<p><code>vkv</code> is releases RPM- &amp; DEB packages and Windows &amp; MacOS Binaries.</p> <p>You can find and download all artifacts in the release section.</p> <pre><code># Ubutu / Debian\ndpkg -i vkv_&lt;version&gt;.deb\n\n# RHEL / CentOS / Fedora\nyum localinstall vkv_&lt;version&gt;.rpm\n\n# Alpine\napk add --allow-untrusted vkv_&lt;version&gt;.apk\n\n# tar.gz\ntar xzf vkv_&lt;version&gt;.tar.gz\nchmod u+x ./vkv\n</code></pre>"},{"location":"installation/#using-go","title":"Using <code>go</code>","text":"<pre><code>go install github.com/FalcoSuessgott/vkv@latest\nvkv\n</code></pre>"},{"location":"installation/#from-sources","title":"From Sources","text":"<pre><code># requires go to be installed\ngit clone https://github.com/FalcoSuessgott/vkv\ncd vkv\ngo install\n</code></pre>"},{"location":"installation/#docker","title":"Docker","text":"<pre><code># ghcr.io\ndocker run -e VAULT_ADDR=\"${VAULT_ADDR}\" -e VAULT_TOKEN=\"${VAULT_TOKEN}\" ghcr.io/falcosuessgott/vkv\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This guide will run you through some of the features of <code>vkv</code>.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>In order to perform all of the described tasks, you will need the following tools:</p> <ul> <li>a Linux/MacOS Shell</li> <li><code>docker</code> installed and running (alternatively <code>vault</code> CLI can be used)</li> <li><code>vkv</code> installed (follow https://falcosuessgott.github.io/vkv/02_installation/)</li> </ul>"},{"location":"quickstart/#spin-up-a-development-vault-server","title":"Spin up a development Vault server","text":"<p>First, we setup a development Vault server.</p> <p>Open a terminal and run:</p> <pre><code>docker run -p 8200:8200 hashicorp/vault server -dev -dev-root-token-id=root\n</code></pre> <p>You should then be able to visit <code>http://127.0.0.1:8200</code> in your browser and see a Vault login page.</p> <p>The <code>root</code> token is <code>root</code>.</p>"},{"location":"quickstart/#verify-connection","title":"Verify connection","text":"<p>Once you have exported the required environment variables, you can verify your connection with the vault CLI by running:</p> <pre><code>export VAULT_ADDR=\"http://127.0.0.1:8200\"\nexport VAULT_TOKEN=\"root\"\n&gt; vault status\nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    1\nThreshold       1\nVersion         1.12.1\nBuild Date      2022-10-27T12:32:05Z\nStorage Type    inmem\nCluster Name    vault-cluster-1bbeabe8\nCluster ID      405e99ab-5f8c-18ca-dafb-228c91add2f4\nHA Enabled      false\n</code></pre> <p>If <code>vault status</code> returned an output like this you good to go to the next step</p>"},{"location":"quickstart/#write-secrets-to-vault-using-vault","title":"Write secrets to Vault using <code>vault</code>","text":"<p>In a development Vault server a <code>KVv2</code> under <code>secret/</code> is enabled by default. We want to write some secrets using <code>vault</code>:</p> <pre><code>vault kv put -mount=secret admin username=user password=passw0rd\nvault kv metadata put -mount=secret -custom-metadata=key=value admin\nvault kv put -mount=secret db/prod env=prod username=user password=passw0rd-prod\nvault kv put -mount=secret db/dev env=dev username=user password=passw0rd-dev\n</code></pre>"},{"location":"quickstart/#list-secrets-using-vkv","title":"List secrets using <code>vkv</code>","text":"<p><code>vkv</code> requires at least <code>VAULT_ADDR</code> and <code>VAULT_TOKEN</code> if the <code>vault status</code> command works, <code>vkv</code> will also work.</p> <p>We can now use <code>vkv</code> to list all of our secrets recursively:</p> <pre><code>&gt; vkv export --path secret\nsecret/ [desc=key/value secret storage] [type=kv2]\n\u251c\u2500\u2500 admin [v=1] [key=value]\n\u2502   \u2514\u2500\u2500 sub=********\n\u251c\u2500\u2500 demo [v=1]\n\u2502   \u2514\u2500\u2500 foo=***\n\u2514\u2500\u2500 sub\n    \u251c\u2500\u2500 demo [v=1]\n    \u2502   \u251c\u2500\u2500 demo=***********\n    \u2502   \u251c\u2500\u2500 password=******\n    \u2502   \u2514\u2500\u2500 user=*****\n    \u2514\u2500\u2500 sub2\n        \u2514\u2500\u2500 demo [v=2] [admin=false key=value]\n            \u251c\u2500\u2500 admin=***\n            \u251c\u2500\u2500 foo=***\n            \u251c\u2500\u2500 password=********\n            \u2514\u2500\u2500 user=****\n</code></pre> <p>Here are some explanations: * <code>vkv</code> prints the description and the engine type + version</p> <ul> <li> <p><code>vkv</code> masks the secrets per default, you can disable this by using <code>--show-values</code> or <code>VKV_EXPORT_SHOW_VALUES=true</code></p> </li> <li> <p><code>vkv</code> limits the length of the secrets per default to <code>12</code> for readability purposes (You can set you own value length by using <code>--max-value-length=XX</code> or <code>VKV_EXPORT_MAX_VALUE_LENGTH=XX</code>)</p> </li> <li> <p><code>v1</code> indicates the secret version (disable by using <code>--show-version</code>) or <code>VKV_EXPORT_SHOW_VERSION=false</code></p> </li> <li> <p><code>[key=value]</code> represents the custom metadata that we added to the secret in step 3. (disable by <code>--show-metadata</code> or (<code>VKV_EXPORT_SHOW_METADATA=false</code>)</p> </li> <li> <p>every secret is a hyperlink which links to the secret in the Vault UI  (disable with <code>--with-hyperlink=false</code> or <code>VKV_EXPORT_WITH_HYPERLINK</code>). Works only for supported terminals (see https://github.com/savioxavier/termlink/blob/master/termlink.go#L80)</p> </li> </ul> <p>This output format is the default format called <code>base</code>. <code>vkv</code> has many other useful output formats.</p> <p>You can see them all using this oneliner:</p> <pre><code>for f in base yaml json markdown policy export; do\necho -n \"\\n===&gt; Output Format: $f &lt;===\\n\"\nvkv export -p secret --format=$f;\ndone\n\n===&gt; Output Format: base &lt;===\nsecret/ [desc=key/value secret storage] [type=kv2]\n\u251c\u2500\u2500 admin [v=1] [key=value]\n\u2502   \u2514\u2500\u2500 sub=********\n\u251c\u2500\u2500 demo [v=1]\n\u2502   \u2514\u2500\u2500 foo=***\n\u2514\u2500\u2500 sub\n    \u251c\u2500\u2500 demo [v=1]\n    \u2502   \u251c\u2500\u2500 demo=***********\n    \u2502   \u251c\u2500\u2500 password=******\n    \u2502   \u2514\u2500\u2500 user=*****\n    \u2514\u2500\u2500 sub2\n        \u2514\u2500\u2500 demo [v=2] [admin=false key=value]\n            \u251c\u2500\u2500 admin=***\n            \u251c\u2500\u2500 foo=***\n            \u251c\u2500\u2500 password=********\n            \u2514\u2500\u2500 user=****\n\n===&gt; Output Format: yaml &lt;===\nsecret/:\n  admin:\n    password: '********'\n    username: '****'\n  db/:\n    dev:\n      env: '***'\n      password: '************'\n      username: '****'\n    prod:\n      env: '****'\n      password: '*************'\n      username: '****'\n\n\n===&gt; Output Format: json &lt;===\n{\n  \"secret/\": {\n    \"admin\": {\n      \"password\": \"********\",\n      \"username\": \"****\"\n    },\n    \"db/\": {\n      \"dev\": {\n        \"env\": \"***\",\n        \"password\": \"************\",\n        \"username\": \"****\"\n      },\n      \"prod\": {\n        \"env\": \"****\",\n        \"password\": \"*************\",\n        \"username\": \"****\"\n      }\n    }\n  }\n}\n\n===&gt; Output Format: markdown &lt;===\n|      PATH      |   KEY    |    VALUE     | VERSION | METADATA  |\n|----------------|----------|--------------|---------|-----------|\n| secret/admin   | password | ********     |       1 | key=value |\n|                | username | ****         |         |           |\n| secret/db/dev  | env      | ***          |       1 |           |\n|                | password | ************ |         |           |\n|                | username | ****         |         |           |\n| secret/db/prod | env      | ****         |       1 |           |\n|                | password | ************ |         |           |\n|                | username | ****         |         |           |\n\n===&gt; Output Format: policy &lt;===\nPATH            CREATE  READ    UPDATE  DELETE  LIST    ROOT\nsecret/admin    \u2716       \u2716       \u2716       \u2716       \u2716       \u2714\nsecret/db/dev   \u2716       \u2716       \u2716       \u2716       \u2716       \u2714\nsecret/db/prod  \u2716       \u2716       \u2716       \u2716       \u2716       \u2714\n\n===&gt; Output Format: export &lt;===\nexport env='prod'\nexport password='passw0rd-prod'\nexport username='user'\n</code></pre> <p>Most of these formats, offer various commandline flags, such as <code>--show-secrets</code>, <code>--only-paths</code>, <code>--only-keys</code>, <code>--max-value-length</code> to modify the output. These flags can also be set through environment variables:</p> <pre><code>&gt; VKV_EXPORT_FORMAT=JSON VKV_EXPORT_SHOW_VALUES=true vkv export -p secret\n{\n  \"secret/\": {\n    \"admin\": {\n      \"password\": \"passw0rd\",\n      \"username\": \"user\"\n    },\n    \"db/\": {\n      \"dev\": {\n        \"env\": \"dev\",\n        \"password\": \"passw0rd-dev\",\n        \"username\": \"user\"\n      },\n      \"prod\": {\n        \"env\": \"prod\",\n        \"password\": \"passw0rd-prod\",\n        \"username\": \"user\"\n      }\n    }\n  }\n}\n</code></pre> <p>Per default <code>vkv</code> splits the secret paths at <code>/</code>, if you prefer a non-nested output (for scripting purposes) you can enable <code>--merge-paths</code> (only works in <code>yaml</code>, <code>json</code> or <code>template</code> output format):</p> <pre><code># YAML\n&gt; vkv export -p secret --merge-paths -f=yaml\nsecret/admin:\n  sub: password\nsecret/demo:\n  foo: bar\nsecret/sub/demo:\n  demo: hello world\n  password: s3cre5&lt;\n  user: admin\nsecret/sub/sub2/demo:\n  foo: bar\n  password: password\n  user: user\n\n# JSON\n&gt; vkv export -p secret --merge-paths -f=json\n{\n  \"secret/admin\": {\n    \"sub\": \"password\"\n  },\n  \"secret/demo\": {\n    \"foo\": \"bar\"\n  },\n  \"secret/sub/demo\": {\n    \"demo\": \"hello world\",\n    \"password\": \"s3cre5&lt;\",\n    \"user\": \"admin\"\n  },\n  \"secret/sub/sub2/demo\": {\n    \"foo\": \"bar\",\n    \"password\": \"password\",\n    \"user\": \"user\"\n  }\n}\n</code></pre>"},{"location":"quickstart/#import-secrets-using-vkv","title":"Import secrets using <code>vkv</code>","text":"<p>Meanwhile <code>vkv export</code> can be used to store secrets, <code>vkv import</code> is used to import secrets from a <code>vkv export</code> command (either <code>yaml</code> or <code>json</code> format is accepted).</p> <p>Knowing this, we can copy a secret engine to another secret engine:</p> <pre><code>vkv export -p secret -f=yaml | vkv import - -p copy\nreading secrets from STDIN\nparsing secrets from YAML\nwriting secret \"copy/db/dev\"\nwriting secret \"copy/db/prod\"\nwriting secret \"copy/admin\"\nsuccessfully imported all secrets\n\nresult:\n\ncopy/ [type=kv2]\n\u251c\u2500\u2500 admin [v=1] [key=value]\n\u2502   \u2514\u2500\u2500 sub=********\n\u251c\u2500\u2500 demo [v=1]\n\u2502   \u2514\u2500\u2500 foo=***\n\u2514\u2500\u2500 sub\n    \u251c\u2500\u2500 demo [v=1]\n    \u2502   \u251c\u2500\u2500 demo=***********\n    \u2502   \u251c\u2500\u2500 password=******\n    \u2502   \u2514\u2500\u2500 user=*****\n    \u2514\u2500\u2500 sub2\n        \u2514\u2500\u2500 demo [v=2] [admin=false key=value]\n            \u251c\u2500\u2500 admin=***\n            \u251c\u2500\u2500 foo=***\n            \u251c\u2500\u2500 password=********\n            \u2514\u2500\u2500 user=****\n</code></pre> <p>Or even to another Vault instance:</p> <pre><code>vkv export -p secret -f=yaml | VAULT_ADDR=\"...\" VAULT_TOKEN=\"...\" vkv import - -p copy\n[...]\n</code></pre> <p>The <code>-</code> tells <code>vkv</code> to read the secrets from STDIN. You cal also specify a file using the <code>--file</code> parameter.</p> <p><code>vkv</code> will create the <code>KVv2</code> engine if it doesn't exist. If the engine indeed exists, <code>vkv</code> will error unless <code>--force</code> is used.</p> <p>You can also copy sub-paths to other engines:</p> <pre><code>vkv export -p secret/admin -f=yaml --show-values| vkv import - -p admin\nreading secrets from STDIN\nparsing secrets from YAML\nwriting secret \"admin/admin\"\nsuccessfully imported all secrets\n\nresult:\n\nadmin/\n\u2514\u2500\u2500 admin [v=1]\n    \u251c\u2500\u2500 password=********\n    \u2514\u2500\u2500 username=****\n</code></pre>"},{"location":"quickstart/#create-kvv2-snapshots-using-vkv","title":"Create KVv2 Snapshots using <code>vkv</code>","text":"<p><code>vkv</code> enables you to create and restore snapshots of all KVv2 engines in all namespaces of a Vault instance (requires an appropiate token + policy):</p> <p>Consider the following namespaces and KVv2 engines on a Vault Enterprise instance:</p> <pre><code># list all namespaces\nvkv list namespaces --all\nsub\nsub/sub2\ntest\ntest/test2\ntest/test2/test3\n\n# list all engines with their respective namespace as the prefix\nvkv list engines --all --include-ns-prefix\nsecret\nsecret_2\nsub/sub2/sub_sub2_secret\nsub/sub2/sub_sub2_secret_2\nsub/sub_secret\nsub/sub_secret_2\ntest/test2/test3/test_test2_test3_secret\ntest/test2/test3/test_test2_test3_secret_2\n</code></pre> <p>You can create a snapshot of those KVv2 engines by running:</p> <pre><code>vkv snapshot save --destination vkv-export-$(date '+%Y-%m-%d')\ncreated vkv-export-2022-12-29\ncreated vkv-export-2022-12-29/secret.yaml\ncreated vkv-export-2022-12-29/secret_2.yaml\ncreated vkv-export-2022-12-29/sub\ncreated vkv-export-2022-12-29/sub/sub_secret_2.yaml\ncreated vkv-export-2022-12-29/sub/sub_secret.yaml\ncreated vkv-export-2022-12-29/sub/sub2\ncreated vkv-export-2022-12-29/sub/sub2/sub_sub2_secret.yaml\ncreated vkv-export-2022-12-29/sub/sub2/sub_sub2_secret_2.yaml\ncreated vkv-export-2022-12-29/test\ncreated vkv-export-2022-12-29/test/test2\ncreated vkv-export-2022-12-29/test/test2/test3\ncreated vkv-export-2022-12-29/test/test2/test3/test_test2_test3_secret.yaml\ncreated vkv-export-2022-12-29/test/test2/test3/test_test2_test3_secret_2.yaml\n</code></pre> <p>As you can see: <code>vkv</code> exported all engines and wrote them to the specified directory:</p> <pre><code>vkv-export-2022-12-29/\n\u251c\u2500\u2500 secret_2.yaml\n\u251c\u2500\u2500 secret.yaml\n\u251c\u2500\u2500 sub\n\u2502   \u251c\u2500\u2500 sub2\n\u2502   \u2502   \u251c\u2500\u2500 sub_sub2_secret_2.yaml\n\u2502   \u2502   \u2514\u2500\u2500 sub_sub2_secret.yaml\n\u2502   \u251c\u2500\u2500 sub_secret_2.yaml\n\u2502   \u2514\u2500\u2500 sub_secret.yaml\n\u2514\u2500\u2500 test\n    \u2514\u2500\u2500 test2\n        \u2514\u2500\u2500 test3\n            \u251c\u2500\u2500 test_test2_test3_secret_2.yaml\n            \u2514\u2500\u2500 test_test2_test3_secret.yaml\n\n5 directories, 8 files\n</code></pre> <p>whereas one file is the JSON output of a single KVv2 engine:</p> <pre><code>cat vkv-export-2022-12-29/secret.yaml\n{\n  \"admin\": {\n    \"sub\": \"password\"\n  },\n  \"demo\": {\n    \"foo\": \"bar\"\n  },\n  \"sub/\": {\n    \"demo\": {\n      \"demo\": \"hello world\",\n      \"password\": \"s3cre5\",\n      \"user\": \"admin\"\n    },\n    \"sub2/\": {\n      \"demo\": {\n        \"admin\": \"key\",\n        \"foo\": \"bar\",\n        \"password\": \"password\",\n        \"user\": \"user\"\n      }\n    }\n  }\n}\n</code></pre> <p>You could <code>.tar.gz</code> those directories and save those encrypted files in a secure fashion.</p>"},{"location":"quickstart/#restore-vkv-snapshots","title":"Restore vkv snapshots","text":"<p>In order to restore a <code>vkv</code> snapshot the <code>snapshot restore</code> command is invoked:</p> <pre><code># no KVv2 engines configured\nvkv list engines --all --include-ns-prefix\n[ERROR] no engines found.\n\n# restore a snapshot\nvkv snapshot restore --source vkv-export-2022-12-29\n[root] restore engine: secret\n[root] writing secret \"secret/admin\"\n[root] writing secret \"secret/demo\"\n[root] writing secret \"secret/sub/demo\"\n[root] writing secret \"secret/sub/sub2/demo\"\n[root] restore engine: secret_2\n[root] writing secret \"secret_2/admin\"\n[root] writing secret \"secret_2/demo\"\n[root] writing secret \"secret_2/sub/demo\"\n[root] writing secret \"secret_2/sub/sub2/demo\"\n[root] restore namespace: \"sub\"\n[sub] restore namespace: \"sub2\"\n[sub/sub2] restore engine: sub_sub2_secret\n[sub/sub2] writing secret \"sub_sub2_secret/admin\"\n[sub/sub2] writing secret \"sub_sub2_secret/demo\"\n[sub/sub2] writing secret \"sub_sub2_secret/sub/demo\"\n[sub/sub2] writing secret \"sub_sub2_secret/sub/sub2/demo\"\n[sub/sub2] restore engine: sub_sub2_secret_2\n[sub/sub2] writing secret \"sub_sub2_secret_2/admin\"\n[sub/sub2] writing secret \"sub_sub2_secret_2/demo\"\n[sub/sub2] writing secret \"sub_sub2_secret_2/sub/sub2/demo\"\n[sub/sub2] writing secret \"sub_sub2_secret_2/sub/demo\"\n[sub] restore engine: sub_secret\n[sub] writing secret \"sub_secret/admin\"\n[sub] writing secret \"sub_secret/demo\"\n[sub] writing secret \"sub_secret/sub/demo\"\n[sub] writing secret \"sub_secret/sub/sub2/demo\"\n[sub] restore engine: sub_secret_2\n[sub] writing secret \"sub_secret_2/sub/demo\"\n[sub] writing secret \"sub_secret_2/sub/sub2/demo\"\n[sub] writing secret \"sub_secret_2/admin\"\n[sub] writing secret \"sub_secret_2/demo\"\n[root] restore namespace: \"test\"\n[test] restore namespace: \"test2\"\n[test/test2] restore namespace: \"test3\"\n[test/test2/test3] restore engine: test_test2_test3_secret\n[test/test2/test3] writing secret \"test_test2_test3_secret/sub/sub2/demo\"\n[test/test2/test3] writing secret \"test_test2_test3_secret/admin\"\n[test/test2/test3] writing secret \"test_test2_test3_secret/demo\"\n[test/test2/test3] writing secret \"test_test2_test3_secret/sub/demo\"\n[test/test2/test3] restore engine: test_test2_test3_secret_2\n[test/test2/test3] writing secret \"test_test2_test3_secret_2/admin\"\n[test/test2/test3] writing secret \"test_test2_test3_secret_2/demo\"\n[test/test2/test3] writing secret \"test_test2_test3_secret_2/sub/demo\"\n[test/test2/test3] writing secret \"test_test2_test3_secret_2/sub/sub2/demo\"\n\n# verify engines have been created\nvkv list engines --all --include-ns-prefix\nsecret\nsecret_2\nsub/sub2/sub_sub2_secret\nsub/sub2/sub_sub2_secret_2\nsub/sub_secret\nsub/sub_secret_2\ntest/test2/test3/test_test2_test3_secret\ntest/test2/test3/test_test2_test3_secret_2\n</code></pre> <p>Please note, that <code>vkv snapshot restore</code> is an experimental feature, you should always double check <code>vkv</code>s beahviour on a development Vault before running it against a production Vault</p>"},{"location":"server/","title":"Server","text":"<p><code>vkv server</code> starts a **unauthenticated http server on port <code>127.0.0.01:8080</code> per default, that returns the kv secrets. This is useful during CI/CD setups.</p> <p>See the CLI Reference for more details on the supported flags and env vars.</p>"},{"location":"server/#server-side","title":"Server side","text":"<pre><code>export VAULT_ADDR=\"...\"\nexport VAULT_TOKEN=\"...\"\n&gt; vkv server --path secret\nlistening on 127.0.0.1:8080\n</code></pre>"},{"location":"server/#client-side","title":"Client side","text":"<pre><code>$&gt; curl localhost:8080/export\nexport admin='key'\nexport demo='hello world'\nexport foo='bar'\nexport password='password'\nexport sub='password'\nexport user='user'\n</code></pre>"},{"location":"server/#output-format","title":"Output Format","text":"<p>you can specify the output format by adding a <code>format</code>-URL Query Parameter:</p> <pre><code>$&gt; curl localhost:8080/export?format=yaml\nsecret/:\n  admin:\n    sub: '********'\n  demo:\n    foo: '***'\n  sub/:\n    demo:\n      demo: '***********'\n      password: '******'\n      user: '*****'\n    sub2/:\n      demo:\n        admin: '***'\n        foo: '***'\n        password: '********'\n        user: '****'\n</code></pre>"},{"location":"snapshots/","title":"Snapshots","text":"<p><code>vkv</code> enables you to create and restore snapshots of all KVv2 engines in all namespaces of a Vault instance (requires an appropiate token + policy):</p> <p>See the CLI Reference for more details on the supported flags and env vars.</p>"},{"location":"snapshots/#example-usage","title":"Example Usage","text":"<p>Consider the following namespaces and KVv2 engines on a Vault Enterprise instance:</p> <pre><code># list all namespaces\nvkv list namespaces --all\nsub\nsub/sub2\ntest\ntest/test2\ntest/test2/test3\n\n# list all engines with their respective namespace as the prefix\nvkv list engines --all --include-ns-prefix\nsecret\nsecret_2\nsub/sub2/sub_sub2_secret\nsub/sub2/sub_sub2_secret_2\nsub/sub_secret\nsub/sub_secret_2\ntest/test2/test3/test_test2_test3_secret\ntest/test2/test3/test_test2_test3_secret_2\n</code></pre> <p>You can create a snapshot of those KVv2 engines by running:</p> <pre><code>vkv snapshot save --destination vkv-export-$(date '+%Y-%m-%d')\ncreated vkv-export-2022-12-29\ncreated vkv-export-2022-12-29/secret.yaml\ncreated vkv-export-2022-12-29/secret_2.yaml\ncreated vkv-export-2022-12-29/sub\ncreated vkv-export-2022-12-29/sub/sub_secret_2.yaml\ncreated vkv-export-2022-12-29/sub/sub_secret.yaml\ncreated vkv-export-2022-12-29/sub/sub2\ncreated vkv-export-2022-12-29/sub/sub2/sub_sub2_secret.yaml\ncreated vkv-export-2022-12-29/sub/sub2/sub_sub2_secret_2.yaml\ncreated vkv-export-2022-12-29/test\ncreated vkv-export-2022-12-29/test/test2\ncreated vkv-export-2022-12-29/test/test2/test3\ncreated vkv-export-2022-12-29/test/test2/test3/test_test2_test3_secret.yaml\ncreated vkv-export-2022-12-29/test/test2/test3/test_test2_test3_secret_2.yaml\n</code></pre> <p>As you can see: <code>vkv</code> exported all engines and wrote them to the specified directory:</p> <pre><code>vkv-export-2022-12-29/\n\u251c\u2500\u2500 secret_2.yaml\n\u251c\u2500\u2500 secret.yaml\n\u251c\u2500\u2500 sub\n\u2502   \u251c\u2500\u2500 sub2\n\u2502   \u2502   \u251c\u2500\u2500 sub_sub2_secret_2.yaml\n\u2502   \u2502   \u2514\u2500\u2500 sub_sub2_secret.yaml\n\u2502   \u251c\u2500\u2500 sub_secret_2.yaml\n\u2502   \u2514\u2500\u2500 sub_secret.yaml\n\u2514\u2500\u2500 test\n    \u2514\u2500\u2500 test2\n        \u2514\u2500\u2500 test3\n            \u251c\u2500\u2500 test_test2_test3_secret_2.yaml\n            \u2514\u2500\u2500 test_test2_test3_secret.yaml\n\n5 directories, 8 files\n</code></pre> <p>whereas one file is the JSON output of a single KVv2 engine:</p> <pre><code>cat vkv-export-2022-12-29/secret.yaml\n{\n  \"admin\": {\n    \"sub\": \"password\"\n  },\n  \"demo\": {\n    \"foo\": \"bar\"\n  },\n  \"sub/\": {\n    \"demo\": {\n      \"demo\": \"hello world\",\n      \"password\": \"s3cre5\",\n      \"user\": \"admin\"\n    },\n    \"sub2/\": {\n      \"demo\": {\n        \"admin\": \"key\",\n        \"foo\": \"bar\",\n        \"password\": \"password\",\n        \"user\": \"user\"\n      }\n    }\n  }\n}\n</code></pre> <p>You could <code>.tar.gz</code> those directories and save those encrypted files in a secure fashion.</p>"},{"location":"snapshots/#restore-vkv-snapshots","title":"Restore vkv snapshots","text":"<p>In order to restore a <code>vkv</code> snapshot the <code>snapshot restore</code> command is invoked:</p> <pre><code># no KVv2 engines configured\nvkv list engines --all --include-ns-prefix\n[ERROR] no engines found.\n\n# restore a snapshot\nvkv snapshot restore --source vkv-export-2022-12-29\n[root] restore engine: secret\n[root] writing secret \"secret/admin\"\n[root] writing secret \"secret/demo\"\n[root] writing secret \"secret/sub/demo\"\n[root] writing secret \"secret/sub/sub2/demo\"\n[root] restore engine: secret_2\n[root] writing secret \"secret_2/admin\"\n[root] writing secret \"secret_2/demo\"\n[root] writing secret \"secret_2/sub/demo\"\n[root] writing secret \"secret_2/sub/sub2/demo\"\n[root] restore namespace: \"sub\"\n[sub] restore namespace: \"sub2\"\n[sub/sub2] restore engine: sub_sub2_secret\n[sub/sub2] writing secret \"sub_sub2_secret/admin\"\n[sub/sub2] writing secret \"sub_sub2_secret/demo\"\n[sub/sub2] writing secret \"sub_sub2_secret/sub/demo\"\n[sub/sub2] writing secret \"sub_sub2_secret/sub/sub2/demo\"\n[sub/sub2] restore engine: sub_sub2_secret_2\n[sub/sub2] writing secret \"sub_sub2_secret_2/admin\"\n[sub/sub2] writing secret \"sub_sub2_secret_2/demo\"\n[sub/sub2] writing secret \"sub_sub2_secret_2/sub/sub2/demo\"\n[sub/sub2] writing secret \"sub_sub2_secret_2/sub/demo\"\n[sub] restore engine: sub_secret\n[sub] writing secret \"sub_secret/admin\"\n[sub] writing secret \"sub_secret/demo\"\n[sub] writing secret \"sub_secret/sub/demo\"\n[sub] writing secret \"sub_secret/sub/sub2/demo\"\n[sub] restore engine: sub_secret_2\n[sub] writing secret \"sub_secret_2/sub/demo\"\n[sub] writing secret \"sub_secret_2/sub/sub2/demo\"\n[sub] writing secret \"sub_secret_2/admin\"\n[sub] writing secret \"sub_secret_2/demo\"\n[root] restore namespace: \"test\"\n[test] restore namespace: \"test2\"\n[test/test2] restore namespace: \"test3\"\n[test/test2/test3] restore engine: test_test2_test3_secret\n[test/test2/test3] writing secret \"test_test2_test3_secret/sub/sub2/demo\"\n[test/test2/test3] writing secret \"test_test2_test3_secret/admin\"\n[test/test2/test3] writing secret \"test_test2_test3_secret/demo\"\n[test/test2/test3] writing secret \"test_test2_test3_secret/sub/demo\"\n[test/test2/test3] restore engine: test_test2_test3_secret_2\n[test/test2/test3] writing secret \"test_test2_test3_secret_2/admin\"\n[test/test2/test3] writing secret \"test_test2_test3_secret_2/demo\"\n[test/test2/test3] writing secret \"test_test2_test3_secret_2/sub/demo\"\n[test/test2/test3] writing secret \"test_test2_test3_secret_2/sub/sub2/demo\"\n\n# verify engines have been created\nvkv list engines --all --include-ns-prefix\nsecret\nsecret_2\nsub/sub2/sub_sub2_secret\nsub/sub2/sub_sub2_secret_2\nsub/sub_secret\nsub/sub_secret_2\ntest/test2/test3/test_test2_test3_secret\ntest/test2/test3/test_test2_test3_secret_2\n</code></pre>"},{"location":"cmd/vkv/","title":"vkv","text":""},{"location":"cmd/vkv/#vkv","title":"vkv","text":"<p>The swiss army knife when working with Vault KV engines</p> <pre><code>vkv [flags]\n</code></pre>"},{"location":"cmd/vkv/#options","title":"Options","text":"<pre><code>  -h, --help   help for vkv\n</code></pre>"},{"location":"cmd/vkv/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv completion    - Generate the autocompletion script for the specified shell</li> <li>vkv export    - recursively list secrets from Vaults KV2 engine in various formats</li> <li>vkv import    - import secrets from vkv's export json or yaml output</li> <li>vkv list    - list namespaces or KV engines</li> <li>vkv server    - expose a http server that returns the read secrets from Vault, useful during CI</li> <li>vkv snapshot    - save or restore a snapshot of all KVv2 engines</li> </ul>"},{"location":"cmd/vkv/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_completion/","title":"vkv completion","text":""},{"location":"cmd/vkv_completion/#vkv-completion","title":"vkv completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"cmd/vkv_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for vkv for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"cmd/vkv_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cmd/vkv_completion/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv  - The swiss army knife when working with Vault KV engines</li> <li>vkv completion bash  - Generate the autocompletion script for bash</li> <li>vkv completion fish  - Generate the autocompletion script for fish</li> <li>vkv completion powershell  - Generate the autocompletion script for powershell</li> <li>vkv completion zsh    - Generate the autocompletion script for zsh</li> </ul>"},{"location":"cmd/vkv_completion/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_completion_bash/","title":"vkv completion bash","text":""},{"location":"cmd/vkv_completion_bash/#vkv-completion-bash","title":"vkv completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"cmd/vkv_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(vkv completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cmd/vkv_completion_bash/#linux","title":"Linux:","text":"<pre><code>vkv completion bash &gt; /etc/bash_completion.d/vkv\n</code></pre>"},{"location":"cmd/vkv_completion_bash/#macos","title":"macOS:","text":"<pre><code>vkv completion bash &gt; $(brew --prefix)/etc/bash_completion.d/vkv\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>vkv completion bash\n</code></pre>"},{"location":"cmd/vkv_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/vkv_completion_bash/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/vkv_completion_bash/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_completion_fish/","title":"vkv completion fish","text":""},{"location":"cmd/vkv_completion_fish/#vkv-completion-fish","title":"vkv completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"cmd/vkv_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>vkv completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>vkv completion fish &gt; ~/.config/fish/completions/vkv.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>vkv completion fish [flags]\n</code></pre>"},{"location":"cmd/vkv_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/vkv_completion_fish/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/vkv_completion_fish/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_completion_powershell/","title":"vkv completion powershell","text":""},{"location":"cmd/vkv_completion_powershell/#vkv-completion-powershell","title":"vkv completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"cmd/vkv_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>vkv completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>vkv completion powershell [flags]\n</code></pre>"},{"location":"cmd/vkv_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/vkv_completion_powershell/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/vkv_completion_powershell/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_completion_zsh/","title":"vkv completion zsh","text":""},{"location":"cmd/vkv_completion_zsh/#vkv-completion-zsh","title":"vkv completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"cmd/vkv_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(vkv completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cmd/vkv_completion_zsh/#linux","title":"Linux:","text":"<pre><code>vkv completion zsh &gt; \"${fpath[1]}/_vkv\"\n</code></pre>"},{"location":"cmd/vkv_completion_zsh/#macos","title":"macOS:","text":"<pre><code>vkv completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_vkv\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>vkv completion zsh [flags]\n</code></pre>"},{"location":"cmd/vkv_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/vkv_completion_zsh/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/vkv_completion_zsh/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_docs/","title":"Vkv docs","text":""},{"location":"cmd/vkv_docs/#title-vkv-docs","title":"title: \"vkv docs\"","text":""},{"location":"cmd/vkv_docs/#vkv-docs","title":"vkv docs","text":"<p>Generate the documentation for the CLI commands.</p> <pre><code>vkv docs [flags]\n</code></pre>"},{"location":"cmd/vkv_docs/#options","title":"Options","text":"<pre><code>  -h, --help   help for docs\n</code></pre>"},{"location":"cmd/vkv_docs/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv  - the swiss army knife when working with Vault KVv2 engines</li> </ul>"},{"location":"cmd/vkv_docs/#auto-generated-by-spf13cobra-on-29-apr-2024","title":"Auto generated by spf13/cobra on 29-Apr-2024","text":""},{"location":"cmd/vkv_export/","title":"vkv export","text":""},{"location":"cmd/vkv_export/#vkv-export","title":"vkv export","text":"<p>recursively list secrets from Vaults KV2 engine in various formats</p> <pre><code>vkv export [flags]\n</code></pre>"},{"location":"cmd/vkv_export/#options","title":"Options","text":"<pre><code>  -p, --path string              KV Engine path (env: VKV_EXPORT_PATH\n  -e, --engine-path string       engine path in case your KV-engine contains special characters such as \"/\", the path (-p) flag will then be appended if specified (\"&lt;engine-path&gt;/&lt;path&gt;\") (env: VKV_EXPORT_ENGINE_PATH)\n      --skip-errors              don't exit on errors (permission denied, deleted secrets) (env: VKV_EXPORT_SKIP_ERRORS)\n      --only-keys                show only keys (env: VKV_EXPORT_ONLY_KEYS)\n      --only-paths               show only paths (env: VKV_EXPORT_ONLY_PATHS)\n      --merge-paths              merge paths (env: VKV_EXPORT_MERGE_PATHS)\n      --show-version             show the secret version (env: VKV_EXPORT_VERSION) (default true)\n      --show-metadata            show the secrets metadata (env: VKV_EXPORT_METADATA) (default true)\n      --show-values              don't mask values (env: VKV_EXPORT_SHOW_VALUES)\n      --with-hyperlink           don't link to the Vault UI (env: VKV_EXPORT_WITH_HYPERLINK) (default true)\n      --max-value-length int     maximum char length of values. Set to \"-1\" for disabling (env: VKV_EXPORT_MAX_VALUE_LENGTH) (default 12)\n      --template-file string     path to a file containing Go-template syntax to render the KV entries (env: VKV_EXPORT_TEMPLATE_FILE)\n      --template-string string   template string containing Go-template syntax to render KV entries (env: VKV_EXPORT_TEMPLATE_STRING)\n  -f, --format string            available output formats: \"base\", \"json\", \"yaml\", \"export\", \"policy\", \"markdown\", \"template\" (env: VKV_EXPORT_FORMAT) (default \"base\")\n  -h, --help                     help for export\n</code></pre>"},{"location":"cmd/vkv_export/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv  - The swiss army knife when working with Vault KV engines</li> </ul>"},{"location":"cmd/vkv_export/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_import/","title":"vkv import","text":""},{"location":"cmd/vkv_import/#vkv-import","title":"vkv import","text":"<p>import secrets from vkv's export json or yaml output</p> <pre><code>vkv import [flags]\n</code></pre>"},{"location":"cmd/vkv_import/#options","title":"Options","text":"<pre><code>  -d, --dry-run                print resulting KV secrets (env: VKV_IMPORT_DRY_RUN)\n  -e, --engine-path string     engine path in case your KV-engine contains special characters such as \"/\", the path (-p) flag will then be appended if specified (\"&lt;engine-path&gt;/&lt;path&gt;\") (env: VKV_IMPORT_PATH)\n  -f, --file string            path to a file containing vkv export json or yaml output (env: VKV_IMPORT_FILE)\n      --force                  overwrite existing kv secrets (env: VKV_IMPORT_FORCE)\n  -h, --help                   help for import\n      --max-value-length int   maximum char length of values. Set to \"-1\" for disabling (env: VKV_IMPORT_MAX_VALUE_LENGTH) (default 12)\n  -p, --path string            KV engine path (env: VKV_IMPORT_PATH)\n      --show-values            don't mask values (env: VKV_IMPORT_SHOW_VALUES)\n  -s, --silent                 do not output secrets (env: VKV_IMPORT_SILENT)\n      --skip-errors            don't exit on errors (permission denied, ...) (env: VKV_EXPORT_SKIP_ERRORS)\n</code></pre>"},{"location":"cmd/vkv_import/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv  - The swiss army knife when working with Vault KV engines</li> </ul>"},{"location":"cmd/vkv_import/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_list/","title":"vkv list","text":""},{"location":"cmd/vkv_list/#vkv-list","title":"vkv list","text":"<p>list namespaces or KV engines</p> <pre><code>vkv list [flags]\n</code></pre>"},{"location":"cmd/vkv_list/#options","title":"Options","text":"<pre><code>  -h, --help   help for list\n</code></pre>"},{"location":"cmd/vkv_list/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv  - The swiss army knife when working with Vault KV engines</li> <li>vkv list engines    - list all KVv2 engines</li> <li>vkv list namespaces  - list all namespaces</li> </ul>"},{"location":"cmd/vkv_list/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_list_engines/","title":"vkv list engines","text":""},{"location":"cmd/vkv_list_engines/#vkv-list-engines","title":"vkv list engines","text":"<p>list all KVv2 engines</p> <pre><code>vkv list engines [flags]\n</code></pre>"},{"location":"cmd/vkv_list_engines/#options","title":"Options","text":"<pre><code>  -n, --namespace string    specify the namespace (env: VKV_LIST_ENGINES_NS)\n  -p, --include-ns-prefix   prepend the namespaces (env: VKV_LIST_ENGINES_NS_PREFIX)\n  -r, --regex string        filter engines by the specified regex pattern (env: VKV_LIST_ENGINES_REGEX\n  -a, --all                 list all KV engines recursively from the specified namespaces (env: VKV_LIST_ENGINES_ALL)\n  -f, --format string       available output formats: \"base\", \"json\", \"yaml\" (env: VKV_LIST_ENGINES_FORMAT) (default \"base\")\n  -h, --help                help for engines\n</code></pre>"},{"location":"cmd/vkv_list_engines/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv list    - list namespaces or KV engines</li> </ul>"},{"location":"cmd/vkv_list_engines/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_list_namespaces/","title":"vkv list namespaces","text":""},{"location":"cmd/vkv_list_namespaces/#vkv-list-namespaces","title":"vkv list namespaces","text":"<p>list all namespaces</p> <pre><code>vkv list namespaces [flags]\n</code></pre>"},{"location":"cmd/vkv_list_namespaces/#options","title":"Options","text":"<pre><code>  -n, --ns string       specify the namespace (env: VKV_LIST_NAMESPACES_NS)\n  -r, --regex string    filter namespaces by the specified regex pattern (env: VKV_LIST_NAMESPACES_REGEX)\n  -a, --all             list all namespaces recursively from the specified namespace (env: VKV_LIST_NAMESPACES_ALL)\n  -f, --format string   available output formats: \"base\", \"json\", \"yaml\" (env: VKV_LIST_NAMESPACES_FORMAT (default \"base\")\n  -h, --help            help for namespaces\n</code></pre>"},{"location":"cmd/vkv_list_namespaces/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv list    - list namespaces or KV engines</li> </ul>"},{"location":"cmd/vkv_list_namespaces/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_server/","title":"vkv server","text":""},{"location":"cmd/vkv_server/#vkv-server","title":"vkv server","text":"<p>expose a http server that returns the read secrets from Vault, useful during CI</p> <pre><code>vkv server [flags]\n</code></pre>"},{"location":"cmd/vkv_server/#options","title":"Options","text":"<pre><code>  -P, --port string          HTTP Server Port (env: VKV_SERVER_PORT) (default \"0.0.0.0:8080\")\n  -p, --path string          KVv2 Engine path (env: VKV_SERVER_PATH)\n  -e, --engine-path string   engine path in case your KV-engine contains special characters such as \"/\", the path value will then be appended if specified (\"&lt;engine-path&gt;/&lt;path&gt;\") (env: VKV_SERVER_ENGINE_PATH)\n      --skip-errors          dont exit on errors (permission denied, deleted secrets) (env: VKV_SERVER_SKIP_ERRORS)\n  -h, --help                 help for server\n</code></pre>"},{"location":"cmd/vkv_server/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv  - The swiss army knife when working with Vault KV engines</li> </ul>"},{"location":"cmd/vkv_server/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_snapshot/","title":"vkv snapshot","text":""},{"location":"cmd/vkv_snapshot/#vkv-snapshot","title":"vkv snapshot","text":"<p>save or restore a snapshot of all KVv2 engines</p> <pre><code>vkv snapshot [flags]\n</code></pre>"},{"location":"cmd/vkv_snapshot/#options","title":"Options","text":"<pre><code>  -h, --help   help for snapshot\n</code></pre>"},{"location":"cmd/vkv_snapshot/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv  - The swiss army knife when working with Vault KV engines</li> <li>vkv snapshot restore    - restore the KV engines defined in the specified snapshot</li> <li>vkv snapshot save  - create a snapshot of all visible KV engines recursively for all namespaces</li> </ul>"},{"location":"cmd/vkv_snapshot/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_snapshot_restore/","title":"vkv snapshot restore","text":""},{"location":"cmd/vkv_snapshot_restore/#vkv-snapshot-restore","title":"vkv snapshot restore","text":"<p>restore the KV engines defined in the specified snapshot</p> <pre><code>vkv snapshot restore [flags]\n</code></pre>"},{"location":"cmd/vkv_snapshot_restore/#options","title":"Options","text":"<pre><code>  -h, --help            help for restore\n  -s, --source string   source of a vkv snapshot export (env :VKV_SNAPSHOT_RESTORE_SOURCE) (default \"./vkv-snapshot-export\")\n</code></pre>"},{"location":"cmd/vkv_snapshot_restore/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv snapshot    - save or restore a snapshot of all KVv2 engines</li> </ul>"},{"location":"cmd/vkv_snapshot_restore/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_snapshot_save/","title":"vkv snapshot save","text":""},{"location":"cmd/vkv_snapshot_save/#vkv-snapshot-save","title":"vkv snapshot save","text":"<p>create a snapshot of all visible KV engines recursively for all namespaces</p> <pre><code>vkv snapshot save [flags]\n</code></pre>"},{"location":"cmd/vkv_snapshot_save/#options","title":"Options","text":"<pre><code>  -d, --destination string   vkv snapshot destination path (env: VKV_SNAPSHOT_SAVE_DESTINATION) (default \"./vkv-snapshot-export\")\n  -h, --help                 help for save\n  -n, --namespace string     namespaces from which to save recursively all visible KV engines (env: VKV_SNAPSHOT_SAVE_NS)\n      --skip-errors          dont exit on errors (permission denied, deleted secrets) (env: VKV_SNAPSHOT_SAVE_SKIP_ERRORS)\n</code></pre>"},{"location":"cmd/vkv_snapshot_save/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv snapshot    - save or restore a snapshot of all KVv2 engines</li> </ul>"},{"location":"cmd/vkv_snapshot_save/#auto-generated-by-spf13cobra-on-20-jul-2025","title":"Auto generated by spf13/cobra on 20-Jul-2025","text":""},{"location":"cmd/vkv_version/","title":"vkv version","text":""},{"location":"cmd/vkv_version/#vkv-version","title":"vkv version","text":"<p>print vkv version</p> <pre><code>vkv version [flags]\n</code></pre>"},{"location":"cmd/vkv_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"cmd/vkv_version/#see-also","title":"SEE ALSO","text":"<ul> <li>vkv  - the swiss army knife when working with Vault KV engines</li> </ul>"},{"location":"cmd/vkv_version/#auto-generated-by-spf13cobra-on-30-apr-2024","title":"Auto generated by spf13/cobra on 30-Apr-2024","text":""}]}